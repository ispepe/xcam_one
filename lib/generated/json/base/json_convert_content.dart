// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:xcam_one/models/wifi_app_mode_entity.dart';
import 'package:xcam_one/generated/json/wifi_app_mode_entity_helper.dart';
import 'package:xcam_one/models/hearbeat_entity.dart';
import 'package:xcam_one/generated/json/hearbeat_entity_helper.dart';
import 'package:xcam_one/models/battery_level_entity.dart';
import 'package:xcam_one/generated/json/battery_level_entity_helper.dart';
import 'package:xcam_one/models/cmd_status_value_entity.dart';
import 'package:xcam_one/generated/json/cmd_status_value_entity_helper.dart';
import 'package:xcam_one/models/capture_entity.dart';
import 'package:xcam_one/generated/json/capture_entity_helper.dart';
import 'package:xcam_one/models/version_entity.dart';
import 'package:xcam_one/generated/json/version_entity_helper.dart';
import 'package:xcam_one/models/cmd_status_entity.dart';
import 'package:xcam_one/generated/json/cmd_status_entity_helper.dart';
import 'package:xcam_one/models/camera_file_entity.dart';
import 'package:xcam_one/generated/json/camera_file_entity_helper.dart';
import 'package:xcam_one/models/disk_free_space_entity.dart';
import 'package:xcam_one/generated/json/disk_free_space_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case WifiAppModeEntity:
				return wifiAppModeEntityFromJson(data as WifiAppModeEntity, json) as T;
			case WifiAppModeFunction:
				return wifiAppModeFunctionFromJson(data as WifiAppModeFunction, json) as T;
			case HearbeatEntity:
				return hearbeatEntityFromJson(data as HearbeatEntity, json) as T;
			case HearbeatFunction:
				return hearbeatFunctionFromJson(data as HearbeatFunction, json) as T;
			case BatteryLevelEntity:
				return batteryLevelEntityFromJson(data as BatteryLevelEntity, json) as T;
			case BatteryLevelFunction:
				return batteryLevelFunctionFromJson(data as BatteryLevelFunction, json) as T;
			case CmdStatusValueEntity:
				return cmdStatusValueEntityFromJson(data as CmdStatusValueEntity, json) as T;
			case CmdStatusValueFunction:
				return cmdStatusValueFunctionFromJson(data as CmdStatusValueFunction, json) as T;
			case CaptureEntity:
				return captureEntityFromJson(data as CaptureEntity, json) as T;
			case CaptureFunction:
				return captureFunctionFromJson(data as CaptureFunction, json) as T;
			case CaptureFunctionFile:
				return captureFunctionFileFromJson(data as CaptureFunctionFile, json) as T;
			case VersionEntity:
				return versionEntityFromJson(data as VersionEntity, json) as T;
			case VersionFunction:
				return versionFunctionFromJson(data as VersionFunction, json) as T;
			case CmdStatusEntity:
				return cmdStatusEntityFromJson(data as CmdStatusEntity, json) as T;
			case CmdStatusFunction:
				return cmdStatusFunctionFromJson(data as CmdStatusFunction, json) as T;
			case CameraFileListEntity:
				return cameraFileListEntityFromJson(data as CameraFileListEntity, json) as T;
			case CameraFileList:
				return cameraFileListFromJson(data as CameraFileList, json) as T;
			case CameraFile:
				return cameraFileFromJson(data as CameraFile, json) as T;
			case CameraFileInfo:
				return cameraFileInfoFromJson(data as CameraFileInfo, json) as T;
			case DiskFreeSpaceEntity:
				return diskFreeSpaceEntityFromJson(data as DiskFreeSpaceEntity, json) as T;
			case DiskFreeSpaceFunction:
				return diskFreeSpaceFunctionFromJson(data as DiskFreeSpaceFunction, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case WifiAppModeEntity:
				return wifiAppModeEntityToJson(data as WifiAppModeEntity);
			case WifiAppModeFunction:
				return wifiAppModeFunctionToJson(data as WifiAppModeFunction);
			case HearbeatEntity:
				return hearbeatEntityToJson(data as HearbeatEntity);
			case HearbeatFunction:
				return hearbeatFunctionToJson(data as HearbeatFunction);
			case BatteryLevelEntity:
				return batteryLevelEntityToJson(data as BatteryLevelEntity);
			case BatteryLevelFunction:
				return batteryLevelFunctionToJson(data as BatteryLevelFunction);
			case CmdStatusValueEntity:
				return cmdStatusValueEntityToJson(data as CmdStatusValueEntity);
			case CmdStatusValueFunction:
				return cmdStatusValueFunctionToJson(data as CmdStatusValueFunction);
			case CaptureEntity:
				return captureEntityToJson(data as CaptureEntity);
			case CaptureFunction:
				return captureFunctionToJson(data as CaptureFunction);
			case CaptureFunctionFile:
				return captureFunctionFileToJson(data as CaptureFunctionFile);
			case VersionEntity:
				return versionEntityToJson(data as VersionEntity);
			case VersionFunction:
				return versionFunctionToJson(data as VersionFunction);
			case CmdStatusEntity:
				return cmdStatusEntityToJson(data as CmdStatusEntity);
			case CmdStatusFunction:
				return cmdStatusFunctionToJson(data as CmdStatusFunction);
			case CameraFileListEntity:
				return cameraFileListEntityToJson(data as CameraFileListEntity);
			case CameraFileList:
				return cameraFileListToJson(data as CameraFileList);
			case CameraFile:
				return cameraFileToJson(data as CameraFile);
			case CameraFileInfo:
				return cameraFileInfoToJson(data as CameraFileInfo);
			case DiskFreeSpaceEntity:
				return diskFreeSpaceEntityToJson(data as DiskFreeSpaceEntity);
			case DiskFreeSpaceFunction:
				return diskFreeSpaceFunctionToJson(data as DiskFreeSpaceFunction);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (WifiAppModeEntity).toString()){
			return WifiAppModeEntity().fromJson(json);
		}	else if(type == (WifiAppModeFunction).toString()){
			return WifiAppModeFunction().fromJson(json);
		}	else if(type == (HearbeatEntity).toString()){
			return HearbeatEntity().fromJson(json);
		}	else if(type == (HearbeatFunction).toString()){
			return HearbeatFunction().fromJson(json);
		}	else if(type == (BatteryLevelEntity).toString()){
			return BatteryLevelEntity().fromJson(json);
		}	else if(type == (BatteryLevelFunction).toString()){
			return BatteryLevelFunction().fromJson(json);
		}	else if(type == (CmdStatusValueEntity).toString()){
			return CmdStatusValueEntity().fromJson(json);
		}	else if(type == (CmdStatusValueFunction).toString()){
			return CmdStatusValueFunction().fromJson(json);
		}	else if(type == (CaptureEntity).toString()){
			return CaptureEntity().fromJson(json);
		}	else if(type == (CaptureFunction).toString()){
			return CaptureFunction().fromJson(json);
		}	else if(type == (CaptureFunctionFile).toString()){
			return CaptureFunctionFile().fromJson(json);
		}	else if(type == (VersionEntity).toString()){
			return VersionEntity().fromJson(json);
		}	else if(type == (VersionFunction).toString()){
			return VersionFunction().fromJson(json);
		}	else if(type == (CmdStatusEntity).toString()){
			return CmdStatusEntity().fromJson(json);
		}	else if(type == (CmdStatusFunction).toString()){
			return CmdStatusFunction().fromJson(json);
		}	else if(type == (CameraFileListEntity).toString()){
			return CameraFileListEntity().fromJson(json);
		}	else if(type == (CameraFileList).toString()){
			return CameraFileList().fromJson(json);
		}	else if(type == (CameraFile).toString()){
			return CameraFile().fromJson(json);
		}	else if(type == (CameraFileInfo).toString()){
			return CameraFileInfo().fromJson(json);
		}	else if(type == (DiskFreeSpaceEntity).toString()){
			return DiskFreeSpaceEntity().fromJson(json);
		}	else if(type == (DiskFreeSpaceFunction).toString()){
			return DiskFreeSpaceFunction().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<WifiAppModeEntity>[] is M){
			return data.map<WifiAppModeEntity>((e) => WifiAppModeEntity().fromJson(e)).toList() as M;
		}	else if(<WifiAppModeFunction>[] is M){
			return data.map<WifiAppModeFunction>((e) => WifiAppModeFunction().fromJson(e)).toList() as M;
		}	else if(<HearbeatEntity>[] is M){
			return data.map<HearbeatEntity>((e) => HearbeatEntity().fromJson(e)).toList() as M;
		}	else if(<HearbeatFunction>[] is M){
			return data.map<HearbeatFunction>((e) => HearbeatFunction().fromJson(e)).toList() as M;
		}	else if(<BatteryLevelEntity>[] is M){
			return data.map<BatteryLevelEntity>((e) => BatteryLevelEntity().fromJson(e)).toList() as M;
		}	else if(<BatteryLevelFunction>[] is M){
			return data.map<BatteryLevelFunction>((e) => BatteryLevelFunction().fromJson(e)).toList() as M;
		}	else if(<CmdStatusValueEntity>[] is M){
			return data.map<CmdStatusValueEntity>((e) => CmdStatusValueEntity().fromJson(e)).toList() as M;
		}	else if(<CmdStatusValueFunction>[] is M){
			return data.map<CmdStatusValueFunction>((e) => CmdStatusValueFunction().fromJson(e)).toList() as M;
		}	else if(<CaptureEntity>[] is M){
			return data.map<CaptureEntity>((e) => CaptureEntity().fromJson(e)).toList() as M;
		}	else if(<CaptureFunction>[] is M){
			return data.map<CaptureFunction>((e) => CaptureFunction().fromJson(e)).toList() as M;
		}	else if(<CaptureFunctionFile>[] is M){
			return data.map<CaptureFunctionFile>((e) => CaptureFunctionFile().fromJson(e)).toList() as M;
		}	else if(<VersionEntity>[] is M){
			return data.map<VersionEntity>((e) => VersionEntity().fromJson(e)).toList() as M;
		}	else if(<VersionFunction>[] is M){
			return data.map<VersionFunction>((e) => VersionFunction().fromJson(e)).toList() as M;
		}	else if(<CmdStatusEntity>[] is M){
			return data.map<CmdStatusEntity>((e) => CmdStatusEntity().fromJson(e)).toList() as M;
		}	else if(<CmdStatusFunction>[] is M){
			return data.map<CmdStatusFunction>((e) => CmdStatusFunction().fromJson(e)).toList() as M;
		}	else if(<CameraFileListEntity>[] is M){
			return data.map<CameraFileListEntity>((e) => CameraFileListEntity().fromJson(e)).toList() as M;
		}	else if(<CameraFileList>[] is M){
			return data.map<CameraFileList>((e) => CameraFileList().fromJson(e)).toList() as M;
		}	else if(<CameraFile>[] is M){
			return data.map<CameraFile>((e) => CameraFile().fromJson(e)).toList() as M;
		}	else if(<CameraFileInfo>[] is M){
			return data.map<CameraFileInfo>((e) => CameraFileInfo().fromJson(e)).toList() as M;
		}	else if(<DiskFreeSpaceEntity>[] is M){
			return data.map<DiskFreeSpaceEntity>((e) => DiskFreeSpaceEntity().fromJson(e)).toList() as M;
		}	else if(<DiskFreeSpaceFunction>[] is M){
			return data.map<DiskFreeSpaceFunction>((e) => DiskFreeSpaceFunction().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}